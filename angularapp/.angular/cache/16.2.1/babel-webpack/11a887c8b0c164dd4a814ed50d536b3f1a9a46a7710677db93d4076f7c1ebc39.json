{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ForexConverterComponent = class ForexConverterComponent {\n  constructor(forexService) {\n    this.forexService = forexService;\n  }\n  convertCurrency(form) {\n    const fromCurrency = form.value.fromCurrency;\n    const toCurrency = form.value.toCurrency;\n    const amount = form.value.amount;\n    const exchangeRate = this.forexService.getExchangeRate(fromCurrency, toCurrency);\n    if (!isNaN(amount)) {\n      this.convertedAmount = amount * exchangeRate;\n      this.resultMessage = `${amount} ${fromCurrency} = ${this.convertedAmount.toFixed(2)} ${toCurrency}`;\n    } else {\n      this.resultMessage = \"Please enter a valid amount.\";\n    }\n  }\n};\nForexConverterComponent = __decorate([Component({\n  selector: 'app-forex-converter',\n  templateUrl: './forex-converter.component.html',\n  styleUrls: ['./forex-converter.component.css']\n})], ForexConverterComponent);\nexport { ForexConverterComponent };","map":{"version":3,"names":["Component","ForexConverterComponent","constructor","forexService","convertCurrency","form","fromCurrency","value","toCurrency","amount","exchangeRate","getExchangeRate","isNaN","convertedAmount","resultMessage","toFixed","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/coder/project/workspace/angularapp/src/app/forex-converter/forex-converter.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ForexService } from '../forex.service';\n\n@Component({\n  selector: 'app-forex-converter',\n  templateUrl: './forex-converter.component.html',\n  styleUrls: ['./forex-converter.component.css']\n})\nexport class ForexConverterComponent {\n  convertedAmount: number | undefined;\n  resultMessage: string | undefined;\n\n  constructor(private forexService: ForexService) { }\n\n  convertCurrency(form: any) {\n    const fromCurrency = form.value.fromCurrency;\n    const toCurrency = form.value.toCurrency;\n    const amount = form.value.amount;\n\n    const exchangeRate = this.forexService.getExchangeRate(fromCurrency, toCurrency);\n\n    if (!isNaN(amount)) {\n      this.convertedAmount = amount * exchangeRate;\n      this.resultMessage = `${amount} ${fromCurrency} = ${this.convertedAmount.toFixed(2)} ${toCurrency}`;\n    } else {\n      this.resultMessage = \"Please enter a valid amount.\";\n    }\n  }\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQzC,IAAaC,uBAAuB,GAApC,MAAaA,uBAAuB;EAIlCC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;EAAkB;EAElDC,eAAeA,CAACC,IAAS;IACvB,MAAMC,YAAY,GAAGD,IAAI,CAACE,KAAK,CAACD,YAAY;IAC5C,MAAME,UAAU,GAAGH,IAAI,CAACE,KAAK,CAACC,UAAU;IACxC,MAAMC,MAAM,GAAGJ,IAAI,CAACE,KAAK,CAACE,MAAM;IAEhC,MAAMC,YAAY,GAAG,IAAI,CAACP,YAAY,CAACQ,eAAe,CAACL,YAAY,EAAEE,UAAU,CAAC;IAEhF,IAAI,CAACI,KAAK,CAACH,MAAM,CAAC,EAAE;MAClB,IAAI,CAACI,eAAe,GAAGJ,MAAM,GAAGC,YAAY;MAC5C,IAAI,CAACI,aAAa,GAAG,GAAGL,MAAM,IAAIH,YAAY,MAAM,IAAI,CAACO,eAAe,CAACE,OAAO,CAAC,CAAC,CAAC,IAAIP,UAAU,EAAE;KACpG,MAAM;MACL,IAAI,CAACM,aAAa,GAAG,8BAA8B;;EAEvD;CACD;AApBYb,uBAAuB,GAAAe,UAAA,EALnChB,SAAS,CAAC;EACTiB,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,C,EACWlB,uBAAuB,CAoBnC;SApBYA,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}